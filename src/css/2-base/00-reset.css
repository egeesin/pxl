/* input:not([type=radio]),textarea,button,select { */
/* input:not([type=file]),textarea,button,select { */
input,textarea,button,select {
	appearance: none;
	border-radius: 0;
}

/**
Prevent 'sub' and 'sup' elements from affecting the line height in all browsers.
(Taken from modern-normalize.css)
*/
sub,
sup {
	font-size: 75%;
	line-height: 0;
	position: relative;
	vertical-align: baseline;
}

sub {
	/* bottom: -.25em; */
	bottom: calc(var(--rhythmUnit)/-2);
}
sup {
	/* top: -.5em; */
	top: calc(var(--rhythmUnit)*-1);
}

/* :is(input,textarea,select,button,a):focus-visible, input:focus::-moz-range-thumb, input:focus::-webkit-slider-thumb { */
:is([tabindex]:not([tabindex="-1"]),a,button,input,select,textarea,summary) {
	outline: .125rem dotted transparent;
	outline-offset: var(--rhythmUnit);
	transition: outline-offset .2s linear;

}
:is([tabindex]:not([tabindex="-1"]),a,button,input,select,textarea,summary):focus-visible {
	outline-color: var(--colorAccent);
	outline-offset: calc(var(--rhythmUnit)/4);
}

/* Pseudos should be separated */
input:focus::-moz-range-thumb {
	outline: .125rem dotted var(--colorAccent);
	outline-offset: calc(var(--rhythmUnit)/4);
}
input:focus::-webkit-slider-thumb {
	outline: .125rem dotted var(--colorAccent);
	outline-offset: calc(var(--rhythmUnit)/4);
}
*:focus:not(:focus-visible) {
	outline: none;
}

input[type][disabled], button:disabled, button[disabled] {
	cursor: not-allowed;
}

/* Disable motion for supported device */
@media (prefers-reduced-motion: reduce) {
	*, *:before, *:after {
		transition: none !important;
		animation: none !important;
		/* animation-play-state: paused !important; */
		/* ^^^ that thing doesn't really work but a good one. */
	}
}
/* Make headings inline inside summary elements */
summary :is(h1,h2,h3,h4,h5,h6,p){
	display: inline;
}

/* Make inline/external SVGs fill colors dynamic. (Already exists in sanitize.css)
 */
/* svg:where(:not([fill])) { */
/* 	fill: currentColor; */
/* } */

/* Don't change cursor into pointer when there is only hash URL. */
a:is([href="#"],[href="#!"]){
	cursor: default;
	/* experimental */
	/* pointer-events: none; */
	/* -experimental */
}

/* * { */
/* 	-webkit-overflow-scrolling: touch */
/* } */

/***** Multilingual Font Stylings and Quote Characters
 */
:lang(en-GB) {
	quotes: '\2018' '\2019' '\201C' '\201D';
}
:lang(tr) {
	quotes: '\00AB' '\00BB' '\2039' '\203A';
}

/*** Custom Scrollbar Style
 */
/** Scrollbar styling for Firefox (CSS standard)
 */
html {
	scrollbar-color: var(--colorText) var(--colorBackmost);
	/* scrollbar-color: var(--scrollbarFg) var(--scrollbarBg); */
	overflow-x:auto;
	/* min-width:0!important */
}
/** Scrollbar styling for rest of the world (except IE)
 */
/* :root ::-webkit-scrollbar { */
/* 	/1* Setting variables for scrollbar size and color *1/ */
/* 	--scrollbarBg: var(--colorBack); */
/* 	--scrollbarFg: var(--colorFrontmost); */
/* 	--scrollbarColorBorder: var(--colorTextOpac20); */

/* 	/1* TODO: If grid gutter is 0px, then think of something else for scrolbar width. *1/ */
/* 	/1* --scrollbarWidth: calc(--gridGutter); *1/ */
/* 	--scrollbarWidth: calc(--gridGutter); */
/* 	/1* --scrollbarThumbWidth: calc(var(--gridGutter) * .20); *1/ */
/* 	--scrollbarThumbWidth: calc(var(--gridGutter) * .20); */

/* 	/1* margin: .5em calc(var(--gridGutter) * .125); *1/ */
/* 	width: var(--scrollbarWidth); */
/* 	height: var(--scrollbarWidth); */
/* 	background-color: var(--scrollbarBg); */
/* 	/1* @media (any-pointer: fine) { *1/ */
/* 	/1* 	width: calc(var(--gridGutter) * .75); *1/ */
/* 	/1* 	height: calc(var(--gridGutter) * .75); *1/ */
/* 	/1* } *1/ */
/* } */
/* :root ::-webkit-scrollbar-track { */
/* 	/1* background: linear-gradient(90deg, var(--scrollbarColorBorder),var(--scrollbarColorBorder) var(--borderHairline), var(--scrollbarBg) 0, var(--colorBackOpac80)) *1/ */
/* } */
/* :root ::-webkit-scrollbar-thumb { */
/* 	background: var(--colorFrontmost); */
/* 	border-radius:0; */
/* 	min-width: 3em; */
/* 	min-height: 3em; */
/* 	box-shadow:inset 0 0 0 var(--scrollbarThumbWidth) var(--scrollbarBg), 0 0 0 var(--borderHairline) var(--scrollbarBg), inset 0 0 0 calc( var(--scrollbarThumbWidth) + var(--borderHairline) ) var(--red); */
/* } */
/* :root:where([class*=-cornerRounded]) ::-webkit-scrollbar-thumb { */
/* 	border-radius:var(--radiusM); */
/* } */
